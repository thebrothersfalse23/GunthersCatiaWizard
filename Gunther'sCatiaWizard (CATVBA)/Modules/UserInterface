' -----------------------------------------------------------------------------
' This module dynamically creates a MultiPage wizard interface for the UserForm.
' It demonstrates how to add pages and controls at runtime, and provides a
' navigation system (Next/Back) for moving between wizard steps.
'
' HOW TO EXPAND:
' - To add more wizard steps, add more pages to the MultiPage control.
' - To add more controls to a page, use the Controls.Add method on the page.
' - To add logic for new controls, declare them as module-level variables if you
'   need to access them outside initialization.
' - Navigation logic is handled by btnNext_Click and btnBack_Click.
' - All controls are created at runtime for maximum flexibility.
' - All page visibility is managed manually for a true wizard experience.
'
' NOTE: This code can live in a standard module. It references a concrete
' UserForm named "UserForm1". If you put it in the formâ€™s code-behind instead,
' you can swap "ui" for "Me" and remove the "ui" variable entirely.
' ============================================================================

Option Explicit

' -----------------------------------------------------------------------------
' Module-level Control Declarations
' These variables hold references to controls that need to be accessed
' outside of initialization (e.g., for event handling or dynamic updates).
' -----------------------------------------------------------------------------
Public lblWelcome As MSForms.Label                   ' Label on the Welcome page
Public btnLaunch As MSForms.CommandButton            ' Launch button on Welcome
Public multiPage As MSForms.multiPage                ' The MultiPage wizard
Public pageWelcome As MSForms.Page                   ' Reference to Page 0
Public btnNext As MSForms.CommandButton              ' Next navigation button
Public btnBack As MSForms.CommandButton              ' Back navigation button
Public btnRunToolDesign As MSForms.CommandButton    ' Run Tool Design button
Public wizardLaunchStatus As Boolean

Public ui As UserForm1                               ' The UI instance

Private Const MARGIN As Single = 10

' Holds the event sinks alive so they don't get garbage collected
Private gButtonSinks As Collection



' Safely compute a MultiPage "client" width/height even when ClientWidth/Height
' are not exposed by the host (e.g., CATIA MSForms).
Private Sub GetMultiPageClientSize(mp As MSForms.multiPage, ByRef w As Single, ByRef h As Single)
    Dim tabH As Single

    w = 0: h = 0

    On Error Resume Next
    ' Try client area first (some hosts expose these)
    w = mp.ClientWidth
    h = mp.ClientHeight

    If Err.Number <> 0 Or w <= 0 Or h <= 0 Then
        ' Fall back to outer size minus tabs/borders
        Err.Clear
        w = mp.Width - 12          ' border/inner padding allowance
        tabH = 0
        tabH = mp.TabFixedHeight   ' if 0, default tab height applies
        If tabH <= 0 Then tabH = 22
        h = mp.Height - (tabH + 12)
    End If
    On Error GoTo 0

    If w < 0 Then w = 0
    If h < 0 Then h = 0
End Sub

Public Sub showUI()
    If multiPage Is Nothing Then initUI
    ui.Show
End Sub

Public Sub initUI()
    If ui Is Nothing Then Set ui = New UserForm1

    With ui
        .Width = 560      ' <- tweak as you like
        .Height = 440
        .Caption = "Gunther's Catia Wizard"
    End With
    
    wizardLaunchStatus = False
    
    ' === 1. Create the MultiPage wizard control ===
        Set multiPage = ui.Controls.Add("Forms.MultiPage.1", "multiPage", True)
        Const PAD As Single = 12, NAV_H As Single = 24, NAV_GAP As Single = 10
    
        ' Get usable form area (works even if InsideWidth/Height aren't exposed)
        Dim formW As Single, formH As Single
        On Error Resume Next
        formW = ui.InsideWidth
        formH = ui.InsideHeight
        If Err.Number <> 0 Or formW <= 0 Or formH <= 0 Then
            Err.Clear
            formW = ui.Width - 12
            formH = ui.Height - 38    ' rough allowance for title/borders
        End If
        On Error GoTo 0
        
        With multiPage
            .Left = PAD
            .Top = PAD
            .Width = formW - 2 * PAD
            ' leave room at the bottom for Back/Next buttons
            .Height = formH - (PAD + NAV_GAP + NAV_H + PAD)
    
            ' Add three pages (add more here for more steps)
            .Pages.Add
            .Pages.Add
            .Pages.Add
    
            .Pages(0).Caption = "Launch Pad -- Welcome Page"
            .Pages(1).Caption = "Tool Design"
            .Pages(2).Caption = "Documentation"
        End With

    ' === 2. Populate the Tool Design page with real controls ===
        Dim pageToolDesign As MSForms.Page
        Set pageToolDesign = multiPage.Pages(1)
    
        ' --- Add a Frame to the Tool Design page to enable scrolling ---
        Dim frmScroll As MSForms.Frame
        Set frmScroll = pageToolDesign.Controls.Add("Forms.Frame.1", "frmScroll", True)
    
        ' Size the scroll frame to the MultiPage client area (robust to host)
        Dim mp As MSForms.multiPage
        Set mp = pageToolDesign.Parent
    
        Dim clientW As Single, clientH As Single
        GetMultiPageClientSize mp, clientW, clientH
    
        With frmScroll
            .Caption = vbNullString
            .Left = 0
            .Top = 0
            .Width = clientW - MARGIN
            .Height = clientH - MARGIN
    
            ' scrolling
            .ScrollBars = fmScrollBarsVertical
            .KeepScrollBarsVisible = fmScrollBarsVertical   ' keep vertical bar visible
            .SpecialEffect = fmSpecialEffectFlat
        End With
    
        ' --- Arrange all controls in organized sections inside the Frame ---
        Dim ctrlTop As Single, leftMargin As Single, rightColumn As Single
        ctrlTop = 12
        leftMargin = 20
        rightColumn = 260
        
        ' === TOOL DESIGN PARAMETERS SECTION ===
        Dim lblTDHeader As MSForms.Label
        Set lblTDHeader = frmScroll.Controls.Add("Forms.Label.1", "lblTDHeader", True)
        With lblTDHeader
            .Caption = "Tool Design Parameters"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 200
            .Font.Bold = True
            .Font.Size = 11
        End With
        ctrlTop = ctrlTop + lblTDHeader.Height + 8
        
        ' Create New Product checkbox
        Dim chkCreateNewProduct As MSForms.CheckBox
        Set chkCreateNewProduct = frmScroll.Controls.Add("Forms.CheckBox.1", "chkCreateNewProduct", True)
        With chkCreateNewProduct
            .Caption = "Create New Product"
            .Left = leftMargin + 10
            .Top = ctrlTop
            .Width = 150
        End With
        ctrlTop = ctrlTop + chkCreateNewProduct.Height + 4
        
        ' Protect References checkbox
        Dim chkProtectRefs As MSForms.CheckBox
        Set chkProtectRefs = frmScroll.Controls.Add("Forms.CheckBox.1", "chkProtectRefs", True)
        With chkProtectRefs
            .Caption = "Protect References"
            .Left = leftMargin + 10
            .Top = ctrlTop
            .Width = 150
        End With
        ctrlTop = ctrlTop + chkProtectRefs.Height + 4
        
        ' Add Suffix to Selection checkbox
        Dim chkAddSuffixToSel As MSForms.CheckBox
        Set chkAddSuffixToSel = frmScroll.Controls.Add("Forms.CheckBox.1", "chkAddSuffixToSel", True)
        With chkAddSuffixToSel
            .Caption = "Add Suffix to Selection"
            .Left = leftMargin + 10
            .Top = ctrlTop
            .Width = 170
        End With
        ctrlTop = ctrlTop + chkAddSuffixToSel.Height + 4
        
        ' Sequential or Single processing checkbox
        Dim chkSeqOrSingle As MSForms.CheckBox
        Set chkSeqOrSingle = frmScroll.Controls.Add("Forms.CheckBox.1", "chkSeqOrSingle", True)
        With chkSeqOrSingle
            .Caption = "Sequential Processing (vs Single)"
            .Left = leftMargin + 10
            .Top = ctrlTop
            .Width = 200
        End With
        ctrlTop = ctrlTop + chkSeqOrSingle.Height + 16
        
        ' === TRAVERSAL MODE SELECTION ===
        Dim lblTraversalHeader As MSForms.Label
        Set lblTraversalHeader = frmScroll.Controls.Add("Forms.Label.1", "lblTraversalHeader", True)
        With lblTraversalHeader
            .Caption = "Traversal Mode"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 120
            .Font.Bold = True
            .Font.Size = 11
        End With
        ctrlTop = ctrlTop + lblTraversalHeader.Height + 4
        
        ' Traversal Mode ComboBox
        Dim cmbTraversalMode As MSForms.ComboBox
        Set cmbTraversalMode = frmScroll.Controls.Add("Forms.ComboBox.1", "cmbTraversalMode", True)
        With cmbTraversalMode
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 220
            .AddItem "tmCollectUniques - Collect unique products"
            .AddItem "tmCollectAllInstances - Collect all instances"
            .AddItem "tmCollectParts - Collect parts only"
            .AddItem "tmCollectProducts - Collect products only"
            .AddItem "tmDuplicateProduct - Duplicate product structure"
            .AddItem "tmAssignProductData - Assign property data"
            .AddItem "tmCopyTemplate - Copy from template"
            .AddItem "tmCollectLeaves - Collect leaf products"
            .AddItem "tmCollectAssemblies - Collect assemblies"
            .AddItem "tmCollectByProperty - Collect by property value"
            .AddItem "tmCollectByName - Collect by name"
            .AddItem "tmCollectByPartNumber - Collect by part number"
            .AddItem "tmCollectByCustomFilter - Collect by custom filter"
            .AddItem "tmCountProducts - Count products"
            .AddItem "tmCountParts - Count parts"
            .AddItem "tmLogTraversal - Log traversal steps"
            .AddItem "tmValidateStructure - Validate structure"
            .AddItem "tmCollectParents - Collect parent products"
            .AddItem "tmCollectChildren - Collect child products"
            .AddItem "tmCollectPaths - Collect paths"
            .AddItem "tmSaveAll - Save all"
            .AddItem "tmSaveAsAll - Save all with new name"
            .AddItem "tmSendTo - Send to destination"
            .ListIndex = 0
        End With
        ctrlTop = ctrlTop + cmbTraversalMode.Height + 16
        
        ' === TRAVERSAL PARAMETERS SECTION ===
        Dim lblParamsHeader As MSForms.Label
        Set lblParamsHeader = frmScroll.Controls.Add("Forms.Label.1", "lblParamsHeader", True)
        With lblParamsHeader
            .Caption = "Traversal Parameters"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 150
            .Font.Bold = True
            .Font.Size = 11
        End With
        ctrlTop = ctrlTop + lblParamsHeader.Height + 8
        
        ' Property Name input (for tmCollectByProperty)
        Dim lblPropertyName As MSForms.Label
        Set lblPropertyName = frmScroll.Controls.Add("Forms.Label.1", "lblPropertyName", True)
        With lblPropertyName
            .Caption = "Property Name:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtPropertyName As MSForms.TextBox
        Set txtPropertyName = frmScroll.Controls.Add("Forms.TextBox.1", "txtPropertyName", True)
        With txtPropertyName
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtPropertyName.Height + 8
        
        ' Property Value input (for tmCollectByProperty)
        Dim lblPropertyValue As MSForms.Label
        Set lblPropertyValue = frmScroll.Controls.Add("Forms.Label.1", "lblPropertyValue", True)
        With lblPropertyValue
            .Caption = "Property Value:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtPropertyValue As MSForms.TextBox
        Set txtPropertyValue = frmScroll.Controls.Add("Forms.TextBox.1", "txtPropertyValue", True)
        With txtPropertyValue
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtPropertyValue.Height + 8
        
        ' Name to Match input (for tmCollectByName)
        Dim lblNameToMatch As MSForms.Label
        Set lblNameToMatch = frmScroll.Controls.Add("Forms.Label.1", "lblNameToMatch", True)
        With lblNameToMatch
            .Caption = "Name to Match:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtNameToMatch As MSForms.TextBox
        Set txtNameToMatch = frmScroll.Controls.Add("Forms.TextBox.1", "txtNameToMatch", True)
        With txtNameToMatch
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtNameToMatch.Height + 8
        
        ' Part Number input (for tmCollectByPartNumber)
        Dim lblPartNumber As MSForms.Label
        Set lblPartNumber = frmScroll.Controls.Add("Forms.Label.1", "lblPartNumber", True)
        With lblPartNumber
            .Caption = "Part Number:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtPartNumber As MSForms.TextBox
        Set txtPartNumber = frmScroll.Controls.Add("Forms.TextBox.1", "txtPartNumber", True)
        With txtPartNumber
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtPartNumber.Height + 8
        
        ' Custom Filter Function input (for tmCollectByCustomFilter)
        Dim lblFilterFunc As MSForms.Label
        Set lblFilterFunc = frmScroll.Controls.Add("Forms.Label.1", "lblFilterFunc", True)
        With lblFilterFunc
            .Caption = "Filter Function:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtFilterFunc As MSForms.TextBox
        Set txtFilterFunc = frmScroll.Controls.Add("Forms.TextBox.1", "txtFilterFunc", True)
        With txtFilterFunc
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtFilterFunc.Height + 16
        
        ' === PROPERTY ASSIGNMENT SECTION ===
        Dim lblAssignHeader As MSForms.Label
        Set lblAssignHeader = frmScroll.Controls.Add("Forms.Label.1", "lblAssignHeader", True)
        With lblAssignHeader
            .Caption = "Property Assignment (for tmAssignProductData)"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 280
            .Font.Bold = True
            .Font.Size = 11
        End With
        ctrlTop = ctrlTop + lblAssignHeader.Height + 8
        
        ' Assignment Type ComboBox
        Dim lblAssignType As MSForms.Label
        Set lblAssignType = frmScroll.Controls.Add("Forms.Label.1", "lblAssignType", True)
        With lblAssignType
            .Caption = "Assign Type:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim cmbAssignType As MSForms.ComboBox
        Set cmbAssignType = frmScroll.Controls.Add("Forms.ComboBox.1", "cmbAssignType", True)
        With cmbAssignType
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 150
            .AddItem "assignPN - Part Number"
            .AddItem "assignName - Name"
            .AddItem "assignDescription - Description"
            .AddItem "assignReference - Reference"
            .AddItem "assignTemplate - Template"
            .AddItem "assignSource - Source"
            .AddItem "assignNomenclature - Nomenclature"
            .AddItem "assignRevision - Revision"
            .AddItem "assignMaterial - Material"
            .AddItem "assignColor - Color"
            .AddItem "assignQuantity - Quantity"
            .AddItem "assignCustomProperty - Custom Property"
            .AddItem "assignMass - Mass"
            .AddItem "assignVolume - Volume"
            .AddItem "assignDensity - Density"
            .AddItem "assignManufacturer - Manufacturer"
            .AddItem "assignProject - Project"
            .ListIndex = 0
        End With
        ctrlTop = ctrlTop + cmbAssignType.Height + 8
        
        ' Assignment Value input
        Dim lblAssignValue As MSForms.Label
        Set lblAssignValue = frmScroll.Controls.Add("Forms.Label.1", "lblAssignValue", True)
        With lblAssignValue
            .Caption = "Assign Value:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtAssignValue As MSForms.TextBox
        Set txtAssignValue = frmScroll.Controls.Add("Forms.TextBox.1", "txtAssignValue", True)
        With txtAssignValue
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtAssignValue.Height + 16
        
        ' === FILE/PATH PARAMETERS SECTION ===
        Dim lblFileHeader As MSForms.Label
        Set lblFileHeader = frmScroll.Controls.Add("Forms.Label.1", "lblFileHeader", True)
        With lblFileHeader
            .Caption = "File/Path Parameters"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 150
            .Font.Bold = True
            .Font.Size = 11
        End With
        ctrlTop = ctrlTop + lblFileHeader.Height + 8
        
        ' Log File Path input (for tmLogTraversal)
        Dim lblLogFilePath As MSForms.Label
        Set lblLogFilePath = frmScroll.Controls.Add("Forms.Label.1", "lblLogFilePath", True)
        With lblLogFilePath
            .Caption = "Log File Path:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtLogFilePath As MSForms.TextBox
        Set txtLogFilePath = frmScroll.Controls.Add("Forms.TextBox.1", "txtLogFilePath", True)
        With txtLogFilePath
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtLogFilePath.Height + 8
        
        ' New Name input (for tmSaveAsAll)
        Dim lblNewName As MSForms.Label
        Set lblNewName = frmScroll.Controls.Add("Forms.Label.1", "lblNewName", True)
        With lblNewName
            .Caption = "New Name:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtNewName As MSForms.TextBox
        Set txtNewName = frmScroll.Controls.Add("Forms.TextBox.1", "txtNewName", True)
        With txtNewName
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtNewName.Height + 8
        
        ' Destination Path input (for tmSendTo)
        Dim lblDestination As MSForms.Label
        Set lblDestination = frmScroll.Controls.Add("Forms.Label.1", "lblDestination", True)
        With lblDestination
            .Caption = "Destination:"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 100
        End With
        
        Dim txtDestination As MSForms.TextBox
        Set txtDestination = frmScroll.Controls.Add("Forms.TextBox.1", "txtDestination", True)
        With txtDestination
            .Left = rightColumn - 40
            .Top = ctrlTop
            .Width = 120
        End With
        ctrlTop = ctrlTop + txtDestination.Height + 16
        
        ' Add Run button to the bottom of the Tool Design page (inside the scrollable frame)
        Set btnRunToolDesign = frmScroll.Controls.Add("Forms.CommandButton.1", "btnRunToolDesign", True)
        With btnRunToolDesign
            .Caption = "Run Tool Design"
            .Left = leftMargin
            .Top = ctrlTop
            .Width = 140
            .Height = 32
        End With
        ctrlTop = ctrlTop + btnRunToolDesign.Height + 12
        
        ' Make the frame actually scroll to fit all the added content
        If ctrlTop + 12 > frmScroll.ScrollHeight Then
            frmScroll.ScrollHeight = ctrlTop + 12
        End If
    
        ' === 3. Reference to Welcome page (Page 0) for later use ===
        Set pageWelcome = multiPage.Pages(0)
    
        ' === 4. Hide all pages except the Welcome page at startup ===
        Dim i As Long
        For i = 0 To multiPage.Pages.count - 1
            multiPage.Pages(i).Visible = False
        Next i
        multiPage.Pages(0).Visible = True
        multiPage.value = 0

    ' === 5â€“6. Welcome content (title/tagline centered; instructions/note left; CTA centered) ===
        Dim lblWelcomeTitle As MSForms.Label
        Dim lblWelcomeSub As MSForms.Label
        Dim lblInstrHead As MSForms.Label
        Dim lblInstr As MSForms.Label
        Dim lblNote As MSForms.Label
        Dim lblCTA As MSForms.Label
        Dim w As Single
        w = multiPage.Width - 2 * PAD
        ctrlTop = 20
        
        ' Title (centered)
        Set lblWelcomeTitle = pageWelcome.Controls.Add("Forms.Label.1", "lblWelcomeTitle", True)
        With lblWelcomeTitle
            .Caption = "Welcome to Gunther's Catia Wizard"
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 20
            .TextAlign = fmTextAlignCenter
            .Font.Bold = True
            .Font.Size = 15
        End With
        ctrlTop = ctrlTop + lblWelcomeTitle.Height + 6
        
        ' Tagline (centered)
        Set lblWelcomeSub = pageWelcome.Controls.Add("Forms.Label.1", "lblWelcomeSub", True)
        With lblWelcomeSub
            .Caption = "This wizard was designed to minimize manual infrastructure processing."
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 12
            .TextAlign = fmTextAlignCenter
            .Font.Size = 10
        End With
        ctrlTop = ctrlTop + lblWelcomeSub.Height + 12
        
        ' Instructions header (left)
        Set lblInstrHead = pageWelcome.Controls.Add("Forms.Label.1", "lblInstrHead", True)
        With lblInstrHead
            .Caption = "Instructions:"
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 15
            .TextAlign = fmTextAlignLeft
            .Font.Bold = True
            .Font.Size = 12
        End With
        ctrlTop = ctrlTop + lblInstrHead.Height + 4
        
        ' Instructions list (left, wrapped)
        Set lblInstr = pageWelcome.Controls.Add("Forms.Label.1", "lblInstr", True)
        With lblInstr
            .Caption = "1.) Ensure the top product is active and selected." & vbCrLf & _
                       "2.) Click Launch to verify system prerequisites" & vbCrLf & _
                       "3.) Use the wizard to configure the desired infrastructure modifications."
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 45   ' ~3 lines
            .WordWrap = True
            .TextAlign = fmTextAlignLeft
            .Font.Size = 12
        End With
        ctrlTop = ctrlTop + lblInstr.Height + 12
        
        ' Note (left, wrapped)
        Set lblNote = pageWelcome.Controls.Add("Forms.Label.1", "lblNote", True)
        With lblNote
            .Caption = "Note: Design-mode is required for proper operation. You may do this before launching the wizard, or it will be done automatically when you click ""Launch"". Some delay is expected and Catia may freeze, but do not exit the program until the wizard is launched."
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 72   ' tweak if you see clipping
            .WordWrap = True
            .TextAlign = fmTextAlignLeft
            .Font.Size = 12
        End With
        ctrlTop = ctrlTop + lblNote.Height + 12
        
        ' CTA (centered)
        Set lblCTA = pageWelcome.Controls.Add("Forms.Label.1", "lblCTA", True)
        With lblCTA
            .Caption = "Click 'Launch' to begin and click 'Cancel' to close the wizard."
            .Left = PAD
            .Top = ctrlTop
            .Width = w
            .Height = 18
            .TextAlign = fmTextAlignCenter
        End With
        ctrlTop = ctrlTop + lblCTA.Height + 16
        
        
        Dim tmp As MSForms.Control
        On Error Resume Next
        Set tmp = pageWelcome.Controls("btnLaunch")
        On Error GoTo 0
        
        If tmp Is Nothing Then
            Set btnLaunch = pageWelcome.Controls.Add("Forms.CommandButton.1", "btnLaunch", True)
            With btnLaunch
                .Caption = "Launch"
                .Width = 80
                .Height = 28
            End With
        Else
            Set btnLaunch = tmp
        End If
        
        ' Center under the CTA line (uses margin/w/ctrlTop from the welcome block)
        With btnLaunch
            .Left = PAD + (w - .Width) / 2
            .Top = ctrlTop
            .Visible = True
        End With
        
    ' === 7. Add Next and Back navigation buttons to the UserForm (not inside MultiPage) ===
        Set btnBack = ui.Controls.Add("Forms.CommandButton.1", "btnBack", True)
        With btnBack
            .Caption = "Back"
            .Width = 60
            .Height = 24
            .Left = multiPage.Left
            .Top = multiPage.Top + multiPage.Height + 10
            .Visible = False                     ' Hide Back on Welcome
        End With
        
        Set btnNext = ui.Controls.Add("Forms.CommandButton.1", "btnNext", True)
        With btnNext
            .Caption = "Next"
            .Width = 60
            .Height = 24
            .Left = multiPage.Left + multiPage.Width - .Width
            .Top = multiPage.Top + multiPage.Height + 10
            .Visible = False                     ' Hide Next on Welcome (page 0)
        End With
        
        ' --- Hook the click events for Launch/Next/Back/RunToolDesign (after they all exist) ---
        If gButtonSinks Is Nothing Then Set gButtonSinks = New Collection
        
        Dim s As CButtonSink
        
        On Error Resume Next                ' ignore duplicate keys if initUI runs twice
        Set s = New CButtonSink: Set s.Btn = btnLaunch: gButtonSinks.Add s, btnLaunch.Name
        Set s = New CButtonSink: Set s.Btn = btnNext:   gButtonSinks.Add s, btnNext.Name
        Set s = New CButtonSink: Set s.Btn = btnBack:   gButtonSinks.Add s, btnBack.Name
        Set s = New CButtonSink: Set s.Btn = btnRunToolDesign: gButtonSinks.Add s, btnRunToolDesign.Name
        On Error GoTo 0
End Sub


' ---------------------------------------------------------------------------
' Input Handlers for Tool Design Page Controls
' ---------------------------------------------------------------------------

' Handles changes in traversal mode selection
Public Sub cmbTraversalMode_Change()
    ' This could be used to show/hide relevant parameter controls
    ' based on the selected traversal mode
End Sub

' Handles clicks on the Run Tool Design button
Public Sub btnRunToolDesign_Click()
    Dim pageToolDesign As MSForms.Page
    Set pageToolDesign = multiPage.Pages(1)
    Dim frmScroll As MSForms.Frame
    Set frmScroll = pageToolDesign.Controls("frmScroll")
    
    ' Collect all input values
    Dim tdParams As New Collection
    Dim selectedMode As String
    
    ' Get Tool Design Parameters
    On Error Resume Next
    tdParams.Add frmScroll.Controls("chkCreateNewProduct").Value, "createNewProduct"
    tdParams.Add frmScroll.Controls("chkProtectRefs").Value, "protectRefs"
    tdParams.Add frmScroll.Controls("chkAddSuffixToSel").Value, "addSuffixToSel"
    tdParams.Add frmScroll.Controls("chkSeqOrSingle").Value, "seqOrSingle"
    
    ' Get selected traversal mode
    selectedMode = frmScroll.Controls("cmbTraversalMode").Text
    
    ' Get traversal parameters based on mode
    Select Case Left(selectedMode, InStr(selectedMode, " ") - 1)
        Case "tmCollectByProperty"
            tdParams.Add frmScroll.Controls("txtPropertyName").Text, "propName"
            tdParams.Add frmScroll.Controls("txtPropertyValue").Text, "propValue"
        Case "tmCollectByName"
            tdParams.Add frmScroll.Controls("txtNameToMatch").Text, "nameToMatch"
        Case "tmCollectByPartNumber"
            tdParams.Add frmScroll.Controls("txtPartNumber").Text, "partNumber"
        Case "tmCollectByCustomFilter"
            tdParams.Add frmScroll.Controls("txtFilterFunc").Text, "filterFunc"
        Case "tmAssignProductData"
            Dim assignTypeText As String
            assignTypeText = frmScroll.Controls("cmbAssignType").Text
            Dim assignType As Long
            ' Parse assign type from combo selection
            If InStr(assignTypeText, "assignPN") > 0 Then assignType = 0
            ElseIf InStr(assignTypeText, "assignName") > 0 Then assignType = 1
            ElseIf InStr(assignTypeText, "assignDescription") > 0 Then assignType = 2
            ElseIf InStr(assignTypeText, "assignReference") > 0 Then assignType = 3
            ElseIf InStr(assignTypeText, "assignTemplate") > 0 Then assignType = 4
            ElseIf InStr(assignTypeText, "assignSource") > 0 Then assignType = 5
            ElseIf InStr(assignTypeText, "assignNomenclature") > 0 Then assignType = 6
            ElseIf InStr(assignTypeText, "assignRevision") > 0 Then assignType = 7
            ElseIf InStr(assignTypeText, "assignMaterial") > 0 Then assignType = 8
            ElseIf InStr(assignTypeText, "assignColor") > 0 Then assignType = 9
            ElseIf InStr(assignTypeText, "assignQuantity") > 0 Then assignType = 10
            ElseIf InStr(assignTypeText, "assignCustomProperty") > 0 Then assignType = 11
            ElseIf InStr(assignTypeText, "assignMass") > 0 Then assignType = 12
            ElseIf InStr(assignTypeText, "assignVolume") > 0 Then assignType = 13
            ElseIf InStr(assignTypeText, "assignDensity") > 0 Then assignType = 14
            ElseIf InStr(assignTypeText, "assignManufacturer") > 0 Then assignType = 15
            ElseIf InStr(assignTypeText, "assignProject") > 0 Then assignType = 16
            Else assignType = 0
            End If
            tdParams.Add assignType, "assignType"
            tdParams.Add frmScroll.Controls("txtAssignValue").Text, "value"
        Case "tmLogTraversal"
            tdParams.Add frmScroll.Controls("txtLogFilePath").Text, "logFilePath"
        Case "tmSaveAsAll"
            tdParams.Add frmScroll.Controls("txtNewName").Text, "newName"
        Case "tmSendTo"
            tdParams.Add frmScroll.Controls("txtDestination").Text, "destination"
    End Select
    On Error GoTo 0
    
    ' Call generateTD with the collected parameters
    Dim toolDesignProduct As Product
    
    ' Get the active product from CATIA
    On Error GoTo NoActiveProduct
    Set toolDesignProduct = CATIA.ActiveDocument.Product
    On Error GoTo 0
    
    If toolDesignProduct Is Nothing Then
        MsgBox "No active product found. Please ensure a product document is active.", vbExclamation, "Error"
        Exit Sub
    End If
    
    ' Validate required inputs
    If selectedMode = "" Then
        MsgBox "Please select a traversal mode.", vbExclamation, "Input Required"
        Exit Sub
    End If
    
    ' Show confirmation with collected parameters
    Dim msg As String
    msg = "Ready to run Tool Design with the following parameters:" & vbCrLf & vbCrLf
    msg = msg & "Create New Product: " & tdParams("createNewProduct") & vbCrLf
    msg = msg & "Protect References: " & tdParams("protectRefs") & vbCrLf
    msg = msg & "Add Suffix to Selection: " & tdParams("addSuffixToSel") & vbCrLf
    msg = msg & "Sequential Processing: " & tdParams("seqOrSingle") & vbCrLf
    msg = msg & "Traversal Mode: " & selectedMode & vbCrLf
    
    If MsgBox(msg & vbCrLf & "Continue?", vbYesNo + vbQuestion, "Confirm Tool Design") = vbYes Then
        ' Call the generateTD subroutine
        Call generateTD(toolDesignProduct, tdParams)
        MsgBox "Tool Design generation completed!", vbInformation, "Success"
    End If
    Exit Sub
    
NoActiveProduct:
    MsgBox "Error accessing active document. Please ensure a CATIA product document is open and active.", vbCritical, "CATIA Error"
    Exit Sub
End Sub


' -----------------------------------------------------------------------------
' btnNext_Click: Advances the wizard to the next page
' -----------------------------------------------------------------------------
Public Sub btnNext_Click()
    Dim curPage As Long
    curPage = multiPage.value
    If curPage < multiPage.Pages.count - 1 Then
        multiPage.Pages(curPage).Visible = False
        multiPage.Pages(curPage + 1).Visible = True
        multiPage.value = curPage + 1
    End If
    btnBack.Visible = (multiPage.value > 0)
    btnNext.Visible = wizardLaunchStatus And (multiPage.value < multiPage.Pages.count - 1)
        
End Sub

' -----------------------------------------------------------------------------
' btnBack_Click: Moves the wizard to the previous page
' -----------------------------------------------------------------------------
Public Sub btnBack_Click()
    Dim curPage As Long
    curPage = multiPage.value
    If curPage > 0 Then
        multiPage.Pages(curPage).Visible = False
        multiPage.Pages(curPage - 1).Visible = True
        multiPage.value = curPage - 1
    End If
    btnBack.Visible = (multiPage.value > 0)
    btnNext.Visible = wizardLaunchStatus And (multiPage.value < multiPage.Pages.count - 1)
End Sub


Public Sub btnLaunch_Click()
    ' Correct MsgBox syntax (no parentheses unless using Call or assigning result)
    MsgBox "runAllGuards Placeholder"

    ' Hide Welcome (page 0), show Tool Design (page 1)
    multiPage.Pages(0).Visible = False
    multiPage.Pages(1).Visible = True
    multiPage.value = 1
    ' Update nav buttons (hide Next on Welcome only)
    wizardLaunchStatus = True
    btnBack.Visible = (multiPage.value > 0)
    btnNext.Visible = wizardLaunchStatus And (multiPage.value < multiPage.Pages.count - 1)
End Sub


