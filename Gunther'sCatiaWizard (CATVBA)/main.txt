'===============================================================
' MODULE: GunthersCatiaWizard.bas
' PURPOSE: Main entry point and orchestrator for Gunther's Catia Wizard macro.
'          Initializes globals, exposes entry point, and demonstrates usage.
'          See Docs.bas for API documentation and usage examples.
'===============================================================

Option Explicit

'===============================================================
' Global Variables (kept minimal)
'===============================================================
'--- [SUGGESTED MODULE: Globals.bas] ---
Public prodDoc As ProductDocument     ' Active ProductDocument
Public rootProd As Product            ' Root Product of the assembly


'===============================================================
' Entry Point (guards → init → UI dispatch only)
'===============================================================
Sub CATMain()
End Sub



' ...existing code...

'===============================================================
' SUB_MODULE: GUARDS
' PURPOSE: Provides discrete guard routines for CATIA macros.
'          Ensures correct environment and selection for safe traversal.
'
' LOGIC FLOW:
'   - Each guard function checks a single precondition for safe macro execution.
'   - runAllGuards() calls each guard in sequence:
'       1. guardCatiaRunning:      CATIA application is running.
'       2. guardActiveDocument:    There is an active document in CATIA.
'       3. guardProductDocument:   The active document is a ProductDocument.
'       4. guardProductSelection:  At least one Product is selected in the tree.
'       5. guardDesignMode:        The root product is in Design Mode (or can be set).
'   - If any guard fails, runAllGuards shows a message and returns False.
'   - Only if all guards pass, runAllGuards sets global variables and returns True.
'   - Use these guards at the start of any macro to prevent invalid state or user error.
'===============================================================
'---------------------------------------------------------------
' Function: guardProductHasChildren
'   Returns True if the given product has children (Products.Count > 0), else False.
'---------------------------------------------------------------
Public Function guardProductHasChildren(prod As Product) As Boolean
    On Error Resume Next
    guardProductHasChildren = False
    If prod Is Nothing Then Exit Function
    If prod.Products Is Nothing Then Exit Function
    If prod.Products.Count > 0 Then guardProductHasChildren = True
    On Error GoTo 0
End Function

'---------------------------------------------------------------
' Function: guardProductHasChildren
'   Returns True if the given product has children (Products.Count > 0), else False.
'---------------------------------------------------------------
Public Function guardProductHasChildren(prod As Product) As Boolean
    On Error Resume Next
    guardProductHasChildren = False
    If prod Is Nothing Then Exit Function
    If prod.Products Is Nothing Then Exit Function
    If prod.Products.Count > 0 Then guardProductHasChildren = True
    On Error GoTo 0
End Function

'---------------------------------------------------------------
' Function: guardCatiaRunning
'   Returns True if CATIA is running, otherwise False.
'---------------------------------------------------------------
Public Function guardCatiaRunning() As Boolean
    guardCatiaRunning = Not (CATIA Is Nothing)
End Function

'---------------------------------------------------------------
' Function: guardActiveDocument
'   Returns True if there is an active document in CATIA, otherwise False.
'---------------------------------------------------------------
Public Function guardActiveDocument() As Boolean
    guardActiveDocument = False
    If CATIA Is Nothing Then Exit Function
    If CATIA.Documents.Count = 0 Then Exit Function
    If CATIA.ActiveDocument Is Nothing Then Exit Function
    guardActiveDocument = True
End Function

'---------------------------------------------------------------
' Function: guardProductDocument
'   Returns True if the active document is a ProductDocument, otherwise False.
'---------------------------------------------------------------
Public Function guardProductDocument() As Boolean
    guardProductDocument = False
    If Not guardActiveDocument() Then Exit Function
    If TypeName(CATIA.ActiveDocument) <> "ProductDocument" Then Exit Function
    guardProductDocument = True
End Function

'---------------------------------------------------------------
' Function: guardProductSelection
'   Returns True if the selection object exists and has at least one Product selected.
'---------------------------------------------------------------
Public Function guardProductSelection() As Boolean
    guardProductSelection = False
    If Not guardProductDocument() Then Exit Function
    Dim sel As Selection
    Set sel = CATIA.ActiveDocument.Selection
    If sel Is Nothing Then Exit Function
    If sel.Count = 0 Then Exit Function
    Dim i As Integer
    For i = 1 To sel.Count
        If TypeName(sel.Item(i).Value) = "Product" Then
            guardProductSelection = True
            Exit Function
        End If
    Next i
End Function

'---------------------------------------------------------------
' Function: guardDesignMode
'   Returns True if the root product is in Design Mode (or can be set), otherwise False.
'---------------------------------------------------------------
Public Function guardDesignMode() As Boolean
    guardDesignMode = False
    If Not guardProductDocument() Then Exit Function
    On Error Resume Next
    CATIA.ActiveDocument.Product.ApplyWorkMode DESIGN_MODE
    guardDesignMode = (Err.Number = 0)
    Err.Clear
    On Error GoTo 0
End Function

'---------------------------------------------------------------
' Function: runAllGuards
'   Checks all preconditions for running CATIA macros safely.
'
'   Returns:
'     Boolean - True if all checks pass, False otherwise.
'   Side effects:
'     Shows a MsgBox and exits if any guard fails.
'---------------------------------------------------------------
Public Function runAllGuards() As Boolean
    runAllGuards = False

    If Not guardCatiaRunning() Then
        MsgBox "CATIA is not running.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    If Not guardActiveDocument() Then
        MsgBox "No document is open in CATIA. Please open a Product document and try again.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    If Not guardProductDocument() Then
        MsgBox "The active document is not a ProductDocument. Please activate a Product document and try again.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    If Not guardProductSelection() Then
        MsgBox "No Product is selected. Please select at least one Product in the tree and try again.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    If Not guardDesignMode() Then
        MsgBox "Could not set Design Mode on the root product.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    ' New: Check that selected product has children
    Dim selProd As Product
    Set selProd = getSelectedProducts(True)
    If Not guardProductHasChildren(selProd) Then
        MsgBox "Selected product has no children. Please select a product with children.", vbExclamation, "Gunther's Catia Wizard"
        Exit Function
    End If

    ' Set globals
    Set prodDoc = CATIA.ActiveDocument
    Set rootProd = prodDoc.Product

    runAllGuards = True
End Function

'===============================================================
' SUB MODULE: helpers.bas
' PURPOSE: Safe property helpers and utility functions for late-bound property
'          access, key building, and string retrieval on CATIA objects.
'===============================================================

Private Const CATIA_TYPE_PRODUCT As String = "Product"

'---------------------------------------------------------------
' Sub: safeSet
'   Safely sets a property ("Nomenclature", "Name", "Description", "PartNumber", "Revision")
'   on a given object. Ignores errors if the property does not exist.
'
' Parameters:
'   obj      - The object on which to set the property.
'   propName - The name of the property to set.
'   value    - The value to assign to the property.
'---------------------------------------------------------------
Public Sub safeSet(ByVal obj As Object, ByVal propName As String, ByVal value As String)
    On Error Resume Next
    Select Case propName
        Case "Nomenclature":      obj.Nomenclature = value
        Case "Name":              obj.Name = value
        Case "Description":       obj.Description = value
        Case "PartNumber":        obj.PartNumber = value
        Case "Revision":          obj.Revision = value
        ' "Definition" and "ReferenceProduct" are read-only for most Product objects; do not set
    End Select
    Err.Clear
    On Error GoTo 0
End Sub

'---------------------------------------------------------------
' Function: getPropStr
'   Safely retrieves a string property ("Nomenclature", "Name", "Description", etc.)
'   from a given object. Returns an empty string if the property does not exist
'   or an error occurs.
'
' Parameters:
'   obj      - The object from which to retrieve the property.
'   propName - The name of the property to retrieve.
'
' Returns:
'   String   - The value of the specified property, or an empty string on error.
'---------------------------------------------------------------
Public Function getPropStr(ByVal obj As Object, ByVal propName As String) As String
    On Error Resume Next
    Select Case propName
        Case "Nomenclature":      getPropStr = obj.Nomenclature
        Case "Name":              getPropStr = obj.Name
        Case "Description":       getPropStr = obj.Description
        Case "PartNumber":        getPropStr = obj.PartNumber
        Case "Definition":        getPropStr = obj.Definition
        Case "Revision":          getPropStr = obj.Revision
        Case "ReferenceProduct":  getPropStr = obj.ReferenceProduct
        Case Else:                getPropStr = ""
    End Select
    If Err.Number <> 0 Then getPropStr = ""
    Err.Clear
    On Error GoTo 0
End Function

'' buildRefKey is now defined in improvedTraversal and should not be duplicated here.

'---------------------------------------------------------------
' Function: getSelectedProducts
'   Returns selected Product(s) from CATIA.
'
'   Parameters:
'     firstSelection [Boolean] - If True, returns only the first selected Product (as a Product object or Nothing).
'                                If False, returns all selected Products as a Collection.
'
'   Returns:
'     If firstSelection = True:   Product (or Nothing if none selected or first selection is not a Product)
'     If firstSelection = False:  Collection of Product objects (may be empty)
'   Note:
'     Assumes guards have already validated CATIA, document, and selection state.
'---------------------------------------------------------------
Public Function getSelectedProducts(Optional ByVal firstSelection As Boolean = False) As Variant
    Dim sel As Selection
    Dim prod As Product
    Dim result As Collection
    Set sel = CATIA.ActiveDocument.Selection

    If firstSelection Then
        If sel.Count >= 1 Then
            If TypeName(sel.Item(1).Value) = "Product" Then
                Set prod = sel.Item(1).Value
                If Not prod Is Nothing Then
                    Set getSelectedProducts = prod
                    Exit Function
                End If
            End If
        End If
        Set getSelectedProducts = Nothing
    Else
        Set result = New Collection
        Dim j As Integer
        For j = 1 To sel.Count
            Set prod = Nothing
            If TypeName(sel.Item(j).Value) = "Product" Then
                Set prod = sel.Item(j).Value
                If Not prod Is Nothing Then
                    result.Add prod
                End If
            End If
        Next j
        Set getSelectedProducts = result
    End If
End Function
'---------------------------------------------------------------
'---------------------------------------------------------------



