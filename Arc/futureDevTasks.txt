# Running Action Item List (RAIL)
# File: futureDevTasks.txt
# Purpose: This file serves as a running action item list for an AI assistant to follow.
# Add new tasks below as needed. Mark completed tasks with [x].

---
## Library Completion Tasks

1. [required] Review and document all public functions and procedures in every module in docsViewer.
2. [required] Ensure robust error handling and explicit variable declaration in all modules, leveraging Option Explicit.
3. [required] Refactor all inter-module calls to use clear, consistent argument order and types.
4. [required] Add comments to all modules describing their purpose, usage, and key design decisions.
5. [required] Ensure all helper functions (e.g., safeSet, getPropStr) are used consistently and documented.
6. [required] Remove any obsolete, duplicate, or unused code and comments from all modules.
7. [required] Add placeholder code or comments for future extension points in each module.
8. [required] Ensure all global variables are minimized, well-documented, and only used where necessary.
9. [required] Add comments describing the expected data flow between UI, traversal, and tool logic in the main entry point.
10. [required] Ensure all modules use consistent naming conventions for variables, parameters, and functions.
11. [preferable] Add placeholder code for logging or debugging in key routines across modules.
12. [preferable] Add comments about performance considerations for large assemblies or data sets.
13. [preferable] Add placeholder code for progress indication or status updates in long-running operations.
14. [preferable] Add comments about possible integration with user preferences or settings.
15. [preferable] Add placeholder code for advanced error logging or diagnostics in all modules.
16. [preferable] Add comments about possible future support for batch or multi-root operations.
17. [preferable] Add placeholder code for dry-run or preview mode logic in tool modules.
18. [preferable] Add comments about possible adaptation for other CATIA object types or document kinds.
19. [preferable] Add placeholder code for exporting or summarizing results in tool modules.
20. [preferable] Add comments about possible integration with external data sources or configuration files.
21. [optional] Add comments about localization or internationalization support for user messages.
22. [optional] Add placeholder code for help tooltips or inline documentation in the UI module.
23. [optional] Add comments about possible integration with other CATIA macros or external tools.
24. [optional] Add placeholder code for logging user actions or macro usage for diagnostics.
25. [optional] Add comments about possible refactoring for modularity, testability, or reuse in other projects.

---
## generateTDSingle Completion Tasks

1. [required] Review and document the full argument list and expected types for generateTDSingle in both code and docsViewer.
2. [required] Add detailed comments to each major code block in generateTDSingle describing its purpose and logic.
3. [required] Ensure all error handling is robust and user-friendly, with clear MsgBox messages for all failure cases.
4. [required] Refactor variable names for clarity and consistency with Launchpad and traversal modules.
5. [required] Add comments describing the expected preconditions (e.g., guards, valid selection) before calling generateTDSingle.
6. [required] Ensure all calls to traversal functions (e.g., getUniques, deepCopyStructure) are correct and documented.
7. [required] Add placeholder code or comments for future extension points (e.g., custom property copying, advanced options).
8. [required] Document the template Product logic and how it interacts with property copying in generateTDSingle.
9. [required] Add comments describing the numbering and naming logic for products and parts.
10. [required] Ensure all property assignments use safeSet and getPropStr helpers, and document this usage.
11. [preferable] Add placeholder code for logging or debugging key steps in the renaming and property copying process.
12. [preferable] Add comments describing how protectRefDocs logic works and when it should be enabled.
13. [preferable] Add placeholder code for progress indication or status updates during long operations.
14. [preferable] Add comments describing how the function could be extended for batch or multi-root operations.
15. [preferable] Add placeholder code for validating input arguments and reporting issues early.
16. [preferable] Add comments about performance considerations for large assemblies.
17. [preferable] Add placeholder code for optional dry-run or preview mode logic.
18. [preferable] Add comments describing how the function could be adapted for use with other CATIA object types.
19. [preferable] Add placeholder code for advanced error logging or diagnostics.
20. [preferable] Add comments about possible integration with user preferences or settings.
21. [optional] Add comments describing potential for localization or internationalization of messages.
22. [optional] Add placeholder code for future support of custom property lists or user-defined fields.
23. [optional] Add comments about possible integration with external data sources or configuration files.
24. [optional] Add placeholder code for exporting a summary of changes made by generateTDSingle.
25. [optional] Add comments about possible refactoring for modularity, testability, or reuse in other macros.

---
## Launchpad/Single/Traversal Synchronization Tasks

1. [required] Ensure all calls from Launchpad to generateTDSingle use the correct argument order and types as defined in generateTDSingle.bas.
2. [required] Ensure Launchpad does not contain any traversal logic; it should only process user input and delegate all traversal operations to traversal.bas wrapper functions via clean calls.
3. [required] Add comments in Launchpad.frm describing the expected data flow between UI, traversal, and tool logic.
4. [required] Ensure all error handling in Launchpad, generateTDSingle, and traversal is consistent and user-friendly.
5. [required] Document all public functions in generateTDSingle.bas and traversal.bas in docsViewer and docs.frm.
6. [required] Add source-level comments to generateTDSingle describing how it expects to interact with traversal functions.
7. [required] Refactor any redundant or duplicate code between Launchpad and generateTDSingle to use shared helpers or traversal routines.
8. [required] Ensure all variable and parameter names are consistent and descriptive across Launchpad, generateTDSingle, and traversal.
9. [required] Add placeholder code in Launchpad for handling traversal errors and reporting them to the user.
10. [required] Add comments in traversal.bas wrapper functions describing their intended use by Launchpad and tool logic.
11. [preferable] Add placeholder code in Launchpad for progress indication during long traversal or tool operations.
12. [preferable] Add comments in generateTDSingle about expected preconditions (e.g., guards, traversal state) before execution.
13. [preferable] Add placeholder code in Launchpad for validating traversal results before passing to tool logic.
14. [preferable] Add comments in Launchpad describing how configurator values are mapped to traversal or tool parameters.
15. [preferable] Add placeholder code in generateTDSingle for logging or debugging traversal input/output.
16. [preferable] Add comments in traversal.bas about error propagation and handling for callers like Launchpad.
17. [preferable] Add placeholder code in Launchpad for handling empty or invalid traversal results.
18. [preferable] Add comments in generateTDSingle about how template Products are expected to be built and passed from Launchpad.
19. [preferable] Add placeholder code in Launchpad for cleaning up temporary Products created for template purposes.
20. [preferable] Add comments in traversal.bas about performance considerations for large assemblies.
21. [optional] Add comments in Launchpad about potential future support for batch or multi-root traversal.
22. [optional] Add placeholder code in generateTDSingle for future extension points (e.g., custom property copying).
23. [optional] Add comments in traversal.bas about possible integration with other CATIA macros.
24. [optional] Add placeholder code in Launchpad for advanced user feedback (e.g., summary of renamed parts).
25. [optional] Add comments in all three modules about possible refactoring for modularity or testability.

---
## Launchpad UI Source Tasks

1. [required] Refactor all Launchpad form event handlers to use robust error handling (On Error GoTo) and ensure all variables are explicitly declared, leveraging Option Explicit at the module level.
2. [required] Ensure all navigation logic (showHomeTab, showNavigationTab, etc.) is implemented as source procedures with clear comments.
3. [required] Implement a source-level stub for setupConfiguratorFields with comments describing expected dynamic field logic.
4. [required] Implement a source-level stub for getConfiguratorValues that returns a placeholder dictionary/object.
5. [required] Add comments to all Launchpad event handlers describing their intended UI effect and workflow.
6. [required] Ensure all Back and Docs button logic is consolidated in source and not duplicated across handlers.
7. [required] Add error handling and user feedback (MsgBox) for all invalid/missing input cases in event handlers.
8. [required] Document all public Launchpad procedures in docsViewer and docs.frm.
9. [required] Add source-level comments listing all required controls and their expected names for the UI designer.
10. [required] Refactor navigation logic to use a WizardPage enum or equivalent for clarity and maintainability.
11. [preferable] Add placeholder code for dynamic visibility toggling of controls in each show*Tab routine.
12. [preferable] Add source-level comments describing the expected layout and grouping of controls for each tab.
13. [preferable] Add a source-level stub for btnConfigRun_Click with comments on expected logic.
14. [preferable] Add placeholder code for input validation in configurator-related routines.
15. [preferable] Add comments describing the expected workflow for passing configurator values to tool logic.
16. [preferable] Add placeholder code for progress indication (e.g., status label) in long-running operations.
17. [preferable] Add comments describing accessibility and keyboard navigation expectations for the UI.
18. [preferable] Add placeholder code for clearing/initializing dynamic fields in setupConfiguratorFields.
19. [preferable] Add comments describing error handling strategy for all user actions.
20. [preferable] Add placeholder code for updating the UI after tool execution (e.g., success/failure feedback).
21. [optional] Add comments describing future support for user preferences or settings in Launchpad.
22. [optional] Add placeholder code for help tooltips or inline documentation in the UI.
23. [optional] Add comments describing potential for localization/internationalization support.
24. [optional] Add placeholder code for logging user actions or errors for diagnostics.
25. [optional] Add comments describing possible integration with other CATIA macros or external tools.
